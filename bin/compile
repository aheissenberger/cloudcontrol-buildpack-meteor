#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
app_dir=$build_dir

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

# install meteor
status "Installing meteor"
# Using different folder to prevent install script form deleting packages file
VENDORED_METEOR="$cache_dir/meteor"
mkdir -p $cache_dir
if [ ! -d "$VENDORED_METEOR" ]; then
  mkdir -p $VENDORED_METEOR
  curl https://install.meteor.com | HOME="$VENDORED_METEOR" /bin/sh
  status "Meteor installed" | indent
else
  status "Meteor from Cache"
fi
status "Meteor version on server"
HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" --version

#status "get required meteor version from app"
cd $build_dir
#[[ `cat .meteor/release` =~ METEOR\@([0-9\.]+) ]] && app_version=${BASH_REMATCH[1]}
#if [ -z "$app_version" ]; then
#   status "change meteor to version: $app_version" 
#   HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" update --release $app_version
#fi

status "Meteor version used by app"
HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" --version

# Run subsequent node/npm commands from the build path
cd $build_dir 

# bundle meteor app
status "Bundle meteor App"

mkdir -p $app_dir
HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" build --directory $app_dir 2>&1 | indent
status "App bundled"
# build creates /bundle subdirectory
app_dir=$app_dir/bundle

# Look in package.json's engines.node field for a semver range
if [ -e $build_dir/package.json ]; then
   semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)
else
   semver_range="null"
fi

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  #protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

status "Downloading and installing node"
node_url=http://nodejs.org/dist/v$node_version/node-v$node_version-linux-x64.tar.gz
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$build_dir/vendor/node/bin:$PATH

status "npm install"
cd $app_dir/programs/server
npm install
cd $build_dir

if [ ! -e $build_dir/Procfile ]; then
  status "Create Procfile"
#  echo 'web: cd bundle; MONGO_URL=${MONGO_URL:-${MONGOSOUP_URL:-$MONGOLAB_URI}} node main.js' > $build_dir/Procfile
  echo 'web: cd bundle; node main.js' > $build_dir/Procfile
  status 'web: cd bundle; node main.js' 
else 
  status "Use existing Procfile"
fi
# Update the PATH
status "Building runtime environment"
PROFILE_PATH="$build_dir/.profile.d/meteorjs.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH=$HOME/vendor/node/bin:$HOME/bin:$HOME/node_modules/.bin:$PATH' >> $PROFILE_PATH
echo 'export MONGO_URL=${MONGO_URL:-${MONGOSOUP_URL:-$MONGOLAB_URI}}' >> $PROFILE_PATH
echo 'if [ -n "$MONGOLAB_URI" ] && [ -n "$MONGO_OPLOG_CRED" ]; then' >> $PROFILE_PATH
echo '[[ "$MONGOLAB_URI" =~ (mongodb://)(.*)(\@.*/)(.*) ]] && export MONGO_OPLOG_URL=${BASH_REMATCH[1]}${MONGO_OPLOG_CRED}${BASH_REMATCH[3]}local' >> $PROFILE_PATH
echo 'fi' >> $PROFILE_PATH
