#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

# Look in package.json's engines.node field for a semver range
if [ -e $build_dir/package.json ]; then
   semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)
else
   semver_range="null"
fi

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

status "Downloading and installing node"
node_url=http://nodejs.org/dist/v$node_version/node-v$node_version-linux-x64.tar.gz
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$build_dir/vendor/node/bin:$PATH

# install meteorite
status "Installing meteor"
# Using different folder to prevent install script form deleting packages file
VENDORED_METEOR="$cache_dir/meteor"
mkdir -p $cache_dir
if [ ! -d "$VENDORED_METEOR" ]; then
  mkdir -p $VENDORED_METEOR
  curl https://install.meteor.com | HOME="$VENDORED_METEOR" /bin/sh
  status "Meteor installed" | indent
else
  status "Meteor from Cache"
fi

status "Install meteorite"
npm install -g meteorite
status "Meteorite installed"

# Run subsequent node/npm commands from the build path
cd $build_dir 

# 
status "Install Packages"
HOME="$BUILD_DIR" mrt install --force | indent
status "Packages installed"

# add "vendor" to ignored directory
sed -i 's:var ignoreFiles = \[:var ignoreFiles = \[ /\^vendor\\/\$/ , /\^cctrlapp\\/\$/ ,:g' $VENDORED_METEOR/.meteor/tools/latest/tools/bundler.js

# bundle meteor app
status "Bundle meteor App"
mkdir -p $build_dir/cctrlapp
HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/tools/latest/launch-meteor" bundle --directory $build_dir/cctrlapp 2>&1 | indent
status "App bundled"

# remove build files
status "Remove build files"
find . -maxdepth 1 -not -name 'vendor' -not -name 'cctrlapp' -not -name '..' -not -name '.' | xargs rm -fr

if [ ! -e $build_dir/Procfile ]; then
  status "Create Procfile"
  echo 'web: MONGO_URL=${MONGO_URL:-${MONGOSOUP_URL:-$MONGOLAB_URI}} node cctrlapp/main.js' > $build_dir/Procfile
  status 'web: MONGO_URL=${MONGO_URL:-${MONGOSOUP_URL:-$MONGOLAB_URI}} node cctrlapp/main.js' 
else 
  status "Use existing Procfile"
fi
# Update the PATH
status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh
