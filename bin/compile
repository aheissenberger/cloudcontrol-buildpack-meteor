#!/usr/bin/env bash
# influence https://github.com/AdmitHub/meteor-buildpack-horse

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
app_dir=$build_dir

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

# install meteor
status "Setup meteor"
# Using different folder to prevent install script form deleting packages file
VENDORED_METEOR="$cache_dir/meteor"
MFROMCACHE=0
mkdir -p $cache_dir
if [ ! -d "$VENDORED_METEOR" ]; then
  status "Install meteor"
  mkdir -p $VENDORED_METEOR
  curl -sS https://install.meteor.com | HOME="$VENDORED_METEOR" /bin/sh
  status "Meteor installed" | indent
else
  status "Meteor from Cache"
  MFROMCACHE=1
fi
MVERSION=`HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" --version`
status "Meteor version on server: ${MVERSION}"

#status "get required meteor version from app"
cd $build_dir
APP_MVERSION=`HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" --version`
status "Meteor version used by app: ${APP_MVERSION}"

# update meteor from cache if app needs different version
if [ "$MVERSION" != "$APP_MVERSION" ]; then
  status "Update meteor"
  cd $VENDORED_METEOR
  HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" update
fi

# Run subsequent node/npm commands from the build path
cd $build_dir 

# bundle meteor app
status "Bundle meteor App"

# <hack issue='https://github.com/meteor/meteor/issues/2867'>
# Temporary hack to address meteor failing to bundle if mobile targets are
# included but server URL is not (issue #2).  Remove mobile targets. This
# should be no-op for any builds that don't have mobile targets.
HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" remove-platform ios android
# </hack>

# <hack issue="https://github.com/meteor/meteor/issues/2796>
# the root cause seems to be related to https://github.com/meteor/meteor/issues/2606
# Also remember to use 'heroku stack:set cedar-14' to allow certain recompiled
# packages to use the newer version memcpy that ships with a more recent version
# of glibc (contained in cedar-14)
if [ -n "${BUILDPACK_PRELAUNCH_METEOR+1}" ]; then 
    status "Pre-launching Meteor to create packages assets and prevent bundling from failing"
    if [  ! -f settings.json ]; then 
      touch "${build_dir}/settings.json"
    fi
    HOME="$VENDORED_METEOR" timeout -s9 30 "$VENDORED_METEOR/.meteor/meteor" --settings settings.json || true
fi
# </hack>

# Now on to bundling. Don't put the bundle in $APP_CHECKOUT_DIR, or it will
# recurse, trying to bundle up its own bundling.
BUNDLE_DEST=`mktemp -d `

mkdir -p $app_dir
HOME="$VENDORED_METEOR" "$VENDORED_METEOR/.meteor/meteor" build --directory $BUNDLE_DEST 2>&1 | indent
status "App bundled"
# build creates /bundle subdirectory
mv "$BUNDLE_DEST/bundle" "$app_dir/bundle"
app_dir=$app_dir/bundle
rmdir $BUNDLE_DEST

# Look in package.json's engines.node field for a semver range
if [ -e $build_dir/package.json ]; then
   semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)
else
   semver_range="null"
fi

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  #protip "Specify a node version in package.json"
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  status "Defaulting to latest stable node: $node_version"
else
  status "Requested node range:  $semver_range"
  status "Resolved node version: $node_version"
fi

status "Setup node.js"
NODE_DEST="$cache_dir/node"
if [ ! -d "${NODE_DEST}" ]; then
  status "Downloading and installing node.js"
  mkdir -p "${NODE_DEST}"

  node_url=http://nodejs.org/dist/v$node_version/node-v$node_version-linux-x64.tar.gz
  curl $node_url -sS -o - | tar xzf - -C $NODE_DEST

  # Move node (and npm) into ./vendor and make them executable
  mkdir -p "$build_dir/vendor/node"
  cp $NODE_DEST/node-v$node_version-linux-x64 "$build_dir/vendor/node"
  chmod +x "$build_dir/vendor/node"/bin/*
else
  status "Copy node.js from Cache"
fi

# Export some environment variables for npm to use when compiling stuff.
PATH="$build_dir/vendor/node"/bin:$PATH
export npm_config_prefix="$build_dir/vendor/node"
export CPATH="$build_dir/vendor/node/include"
export CPPPATH="$CPATH"


status "npm install"
cd $app_dir/programs/server
npm install
cd $build_dir

# If we use npm, run npm install.
if [ -e "$app_dir"/programs/server/package.json ]; then
  cd "$app_dir"/programs/server && npm install
fi


if [ ! -e $build_dir/Procfile ]; then
  status "Create Procfile"
#  echo 'web: cd bundle; MONGO_URL=${MONGO_URL:-${MONGOSOUP_URL:-$MONGOLAB_URI}} node main.js' > $build_dir/Procfile
  echo 'web: cd bundle; node main.js' > $build_dir/Procfile
  status 'web: cd bundle; node main.js' 
else 
  status "Use existing Procfile"
fi

# get default URL of cc host
DEP_NAME_ARRAY=(${DEP_NAME//\// })
if [ "${DEP_NAME_ARRAY[1]}" == "default" ]; then
  DEP_HOSTNAME="${DEP_NAME_ARRAY[0]}"
else
  DEP_HOSTNAME="${DEP_NAME_ARRAY[1]}-${DEP_NAME_ARRAY[0]}"
fi
ROOT_URL="http://${DEP_HOSTNAME}.${DOMAIN}/"

# Update the PATH
status "Building runtime environment"
PROFILE_PATH="$build_dir/.profile.d/meteorjs.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo "export ROOT_URL=${ROOT_URL}" >> $PROFILE_PATH
echo 'export PATH=$HOME/vendor/node/bin:$HOME/bin:$HOME/node_modules/.bin:$PATH' >> $PROFILE_PATH
echo 'export MONGO_URL=${MONGO_URL:-${MONGOSOUP_URL:-$MONGOLAB_URI}}' >> $PROFILE_PATH
echo 'if [ -n "$MONGOLAB_URI" ] && [ -n "$MONGO_OPLOG_CRED" ]; then' >> $PROFILE_PATH
echo '[[ "$MONGOLAB_URI" =~ (mongodb://)(.*)(\@.*/)(.*) ]] && export MONGO_OPLOG_URL=${BASH_REMATCH[1]}${MONGO_OPLOG_CRED}${BASH_REMATCH[3]}local' >> $PROFILE_PATH
echo 'fi' >> $PROFILE_PATH
status "~/.profile.d/meteorjs.sh:"
cat $PROFILE_PATH

